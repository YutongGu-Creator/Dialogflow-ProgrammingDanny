[
    {
        "level": "java_basics",
        "name": "syntax",
        "description": [
            "Syntax",
            "In our HelloWorld JAVA file http: //tpcg.io/HFFhfgZy, we created a programme that print \"Hello World\" to the screen.",
            "Every line of code that runs in Java must be inside a class. In our example, we named the class Main. A class should always start with an uppercase first letter.",
            "The main() method is required and you will see it in every Java program: public static void main(String[] args)",
            "Any code inside the main() method will be executed.",
            "Every Java program has a class name which must match the filename, and that every program must contain the main() method.",
            "Inside the main() method, we can use the println() method to print a line of text to the screen: System.out.println(\"Hello World\");"
        ]
    },
    {
        "level": "java_basics",
        "name": "comments",
        "description": [
            "Comments",
            "Comments can be used to explain Java code, and to make it more readable. It can also be used to prevent execution when testing alternative code.",
            "Single-line comments start with two forward slashes (//). Any text between // and the end of the line is ignored by Java (will not be executed).",
            "Multi-line comments start with /* and ends with */. Any text between /* and */ will be ignored by Java.",
            "Here is an example: http://tpcg.io/Q6FewAjX"
        ]
    },
    {
        "level": "java_basics",
        "name": "variable",
        "description": [
            "Variable",
            "Variables are containers for storing data values.",
            "In Java, there are different types of variables, for example:",
            "String - stores text, such as \"Hello\". String values are surrounded by double quotes",
            "int - stores integers (whole numbers), without decimals, such as 123 or -123",
            "float - stores floating point numbers, with decimals, such as 19.99 or -19.99",
            "char - stores single characters, such as 'a' or 'B'. Char values are surrounded by single quotes",
            "boolean - stores values with two states: true or false",
            "To create a variable, you must specify the type and assign it a value: type variable = value; e.g. http://tpcg.io/riDyQoue",
            "The println() method is often used to display variables. e.g. http://tpcg.io/Q6FewAjX"
        ]
    },
    {
        "level": "java_basics",
        "name": "data types",
        "description": [
            "Data types",
            "A variable must be a specified data type, Data types are divided into two groups:",
            "1.Primitive data types - includes byte, short, int, long, float, double, boolean and char",
            "2.Non-primitive data types - such as String, Arrays and Classes (you will learn more about these later)",
            "The main difference between primitive and non-primitive data types are:",
            "1.Primitive types are predefined (already defined) in Java. Non-primitive types are created by the programmer and is not defined by Java (except for String).",
            "2.Non-primitive types can be used to call methods to perform certain operations, while primitive types cannot.",
            "3.A primitive type has always a value, while non-primitive types can be null.",
            "4.A primitive type starts with a lowercase letter, while non-primitive types starts with an uppercase letter.",
            "5.The size of a primitive type depends on the data type, while non-primitive types have all the same size."
        ]
    },
    {
        "level": "java_basics",
        "name": "type casting",
        "description": [
            "Type casting",
            "Type casting is when you assign a value of one primitive data type to another type.",
            "In Java, there are two types of casting:",
            "1.Widening Casting (automatically) - converting a smaller type to a larger type size: byte -> short -> char -> int -> long -> float -> double",
            "2.Narrowing Casting (manually) - converting a larger type to a smaller size type: double -> float -> long -> int -> char -> short -> byte",
            "e.g. http://tpcg.io/63yl2uEL"
        ]
    },
    {
        "level": "java_basics",
        "name": "operators",
        "description": [
            "Operators",
            "Operators are used to perform operations on variables and values.",
            "Java divides the operators into the following groups:",
            "1.Arithmetic operators 2.Assignment operators 3.Comparison operators 4.Logical operators 5.Bitwise operators"
        ]
    },
    {
        "level": "java_flow_control",
        "name": "scanner",
        "description": [
            "Scanner",
            "We can simply call System.out,println() to output content, but it is more difficult to get user’s input.",
            "Let’s look at an example: http://tpcg.io/RATfJbID",
            "The Scanner class is used to get user input, and it is found in the java.util package.",
            "To use the Scanner class, create an object of the class and use any of the available methods found in the Scanner class documentation. In our example, we used the nextLine() method, which is used to read Strings."
        ]
    },
    {
        "level": "java_flow_control",
        "name": "if",
        "description": [
            "If",
            "Use the if statement to specify a block of Java code to be executed if a condition is true.",
            "In the example below, we test two values to find out if 20 is greater than 18. If the condition is true, print some text: http://tpcg.io/AW0BIvgR",
            "Use the else if statement to specify a new condition if the first condition is false: http://tpcg.io/ZzBr2jPG"
        ]
    },
    {
        "level": "java_flow_control",
        "name": "switch",
        "description": [
            "Switch",
            "Use the switch statement to select one of many code blocks to be executed.",
            "This is how it works:",
            "The switch expression is evaluated once.",
            "The value of the expression is compared with the values of each case.",
            "If there is a match, the associated block of code is executed.",
            "When Java reaches a break keyword, it breaks out of the switch block.",
            "The default keyword specifies some code to run if there is no case match.",
            "This example uses the weekday number to calculate the weekday name: http://tpcg.io/Obs384U0"
        ]
    },
    {
        "level": "java_flow_control",
        "name": "while",
        "description": [
            "While",
            "Loops can execute a block of code as long as a specified condition is reached.",
            "Loops are handy because they save time, reduce errors, and they make code more readable.",
            "The while loop loops through a block of code as long as a specified condition is true: https://www.w3schools.com/java/tryjava.asp?filename=demo_while_loop",
            "The do/while loop is a variant of the while loop.",
            "This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true: https://www.w3schools.com/java/tryjava.asp?filename=demo_do_while_loop"
        ]
    },
    {
        "level": "java_flow_control",
        "name": "for",
        "description": [
            "For",
            "When you know exactly how many times you want to loop through a block of code, use the for loop instead of a while loop.",
            "The example below will print the numbers 0 to 4: https://www.w3schools.com/java/tryjava.asp?filename=demo_for_loop",
            "This example will only print even values between 0 and 10: https://www.w3schools.com/java/tryjava.asp?filename=demo_for_loop_even",
            "There is also a \"for-each\" loop, which is used exclusively to loop through elements in an array.There is also a \"for-each\" loop, which is used exclusively to loop through elements in an array.",
            "The following example outputs all elements in the cars array, using a \"for-each\" loop: https://www.w3schools.com/java/tryjava.asp?filename=demo_array_for_each"
        ]
    },
    {
        "level": "java_oop_basics_part1",
        "name": "method",
        "description": [
            "Method",
            "A method is a block of code which only runs when it is called.",
            "You can pass data, known as parameters, into a method.",
            "Methods are used to perform certain actions, and they are also known as functions.",
            "Why use methods? To reuse code: define the code once, and use it many times."
        ]
    },
    {
        "level": "java_oop_basics_part1",
        "name": "create a method",
        "description": [
            "Create a method",
            "A method must be declared within a class.",
            "It is defined with the name of the method, followed by parentheses ().",
            "Java provides some pre-defined methods, such as System.out.println(), but you can also create your own methods to perform certain actions: http://tpcg.io/tnUSmM7e",
            "myMethod() is the name of the method.",
            "static means that the method belongs to the Main class and not an object of the Main class.",
            "void means that this method does not have a return value."
        ]
    },
    {
        "level": "java_oop_basics_part1",
        "name": "call a method",
        "description": [
            "Call a method",
            "To call a method in Java, write the method's name followed by two parentheses () and a semicolon;",
            "In the following example, myMethod() is used to print a text (the action), when it is called: https://www.w3schools.com/java/tryjava.asp?filename=demo_method",
            "A method can also be called multiple times: https://www.w3schools.com/java/tryjava.asp?filename=demo_method_multiple"
        ]
    },
    {
        "level": "java_oop_basics_part1",
        "name": "parameter",
        "description": [
            "Parameter",
            "Information can be passed to methods as parameter. Parameters act as variables inside the method.",
            "Parameters are specified after the method name, inside the parentheses. You can add as many parameters as you want, just separate them with a comma.",
            "The following example has a method that takes a String called fname as parameter. When the method is called, we pass along a first name, which is used inside the method to print the full name: https://www.w3schools.com/java/tryjava.asp?filename=demo_method_param",
            "You can have as many parameters as you like: https://www.w3schools.com/java/tryjava.asp?filename=demo_method_param2",
            "The void keyword, used in the examples above, indicates that the method should not return a value.",
            "If you want the method to return a value, you can use a primitive data type (such as int, char, etc.) instead of void, and use the return keyword inside the method: https://www.w3schools.com/java/tryjava.asp?filename=demo_method_void",
            "You can also store the result in a variable (recommended, as it is easier to read and maintain): https://www.w3schools.com/java/tryjava.asp?filename=demo_method_void3"
        ]
    },
    {
        "level": "java_oop_basics_part1",
        "name": "overload",
        "description": [
            "Overload",
            "With method overloading, multiple methods can have the same name with different parameters.",
            "In the example below, we overload the plusMethod method to work for both int and double: https://www.w3schools.com/java/tryjava.asp?filename=demo_method_overloading2"
        ]
    },
    {
        "level": "java_oop_basics_part1",
        "name": "scope",
        "description": [
            "Scope",
            "In Java, variables are only accessible inside the region they are created. This is called scope.",
            "Variables declared directly inside a method are available anywhere in the method following the line of code in which they were declared: https://www.w3schools.com/java/tryjava.asp?filename=demo_scope",
            "A block of code refers to all of the code between curly braces {}.",
            "Variables declared inside blocks of code are only accessible by the code between the curly braces, which follows the line in which the variable was declared: https://www.w3schools.com/java/tryjava.asp?filename=demo_scope2"
        ]
    },
    {
        "level": "java_oop_basics_part1",
        "name": "recursion",
        "description": [
            "Recursion",
            "Recursion is the technique of making a function call itself. This technique provides a way to break complicated problems down into simple problems which are easier to solve.",
            "Adding two numbers together is easy to do, but adding a range of numbers is more complicated. In the following example, recursion is used to add a range of numbers together by breaking it down into the simple task of adding two numbers: ",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_recursion",
            "When the sum() function is called, it adds parameter k to the sum of all numbers smaller than k and returns the result. When k becomes 0, the function just returns 0. When running, the program follows these steps:",
            "10 + sum(9) \n 10 + ( 9 + sum(8) ) \n 10 + ( 9 + ( 8 + sum(7) ) ) \n ... \n 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 + sum(0) \n + 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 + 0",
            "Since the function does not call itself when k is 0, the program stops there and returns the result.",
            "Just as loops can run into the problem of infinite looping, recursive functions can run into the problem of infinite recursion. Infinite recursion is when the function never stops calling itself.",
            "Every recursive function should have a halting condition, which is the condition where the function stops calling itself. In the previous example, the halting condition is when the parameter k becomes 0.",
            "It is helpful to see a variety of different examples to better understand the concept. In this example, the function adds a range of numbers between a start and an end.",
            "The halting condition for this recursive function is when end is not greater than start: ",
            "1.Arithmetic operators 2.Assignment operators 3.Comparison operators 4.Logical operators 5.Bitwise operators",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_recursion2"
        ]
    },
    {
        "level": "java_oop_basics_part2",
        "name": "class",
        "description": [
            "Class",
            "Everything in Java is associated with classes and objects, along with its attributes and methods. ",
            "Here’s an example of a class called person:",
            "class Person { \n public String name; \n public int age; \n }",
            "A class can have multiple attributes, like “name” and “age”.",
            "We can create an object (instance) of a class by using “new”:",
            "Person mike = new Person();",
            "This code creates an instance of class Person, and use variable mike to point towards it.",
            "With that variable we can start using the object:",
            "mike.name = \"Mike\"; \n Mike.age = 20; \n System.out.println(mike.name);"
        ]
    },
    {
        "level": "java_oop_basics_part2",
        "name": "constructor",
        "description": [
            "Constructor",
            "A constructor in Java is a special method that is used to initialize objects. The constructor is called when an object of a class is created. It can be used to set initial values for object attributes: ",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_constructor",
            "Constructors can also take parameters, which is used to initialize attributes.",
            "The following example adds an int y parameter to the constructor. Inside the constructor we set x to y (x=y). When we call the constructor, we pass a parameter to the constructor (5), which will set the value of x to 5: ",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_constructor_para"
        ]
    },
    {
        "level": "java_oop_basics_part2",
        "name": "modifier",
        "description": [
            "Modifier",
            "There are two groups of modifiers in JAVA, Access Modifiers that controls the access level and Non-Access Modifiers that do not control access level, but provides other functionality.",
            "In code \"Public class main\", \"public\" is an access modifier.",
            "Here are the description of all the JAVA modifiers: ",
            "https://i.imgur.com/tomfapu.png"
        ]
    },
    {
        "level": "java_oop_basics_part2",
        "name": "encapsulation",
        "description": [
            "Encapsulation",
            "The meaning of Encapsulation, is to make sure that \"sensitive\" data is hidden from users. To achieve this, you must declare class variables/attributes as private.",
            "Then provide public get and set methods to access and update the value of a private variable,",
            "private variables can only be accessed within the same class (an outside class has no access to it). However, it is possible to access them if we provide public get and set methods.",
            "Syntax for both is that they start with either get or set, followed by the name of the variable, with the first letter in upper case: ",
            "https://www.w3schools.com/java/showjava_classes.asp?filename=demo_getset"
        ]
    },
    {
        "level": "java_oop_basics_part2",
        "name": "inheritance",
        "description": [
            "Inheritance",
            "In Java, it is possible to inherit attributes and methods from one class to another. We group the \"inheritance concept\" into two categories:",
            "subclass (child) - the class that inherits from another class",
            "superclass (parent) - the class being inherited from",
            "To inherit from a class, use the extends keyword.",
            "In the example below, the Car class (subclass) inherits the attributes and methods from the Vehicle class (superclass): ",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_inherit"
        ]
    },
    {
        "level": "java_oop_basics_part2",
        "name": "polymorphism",
        "description": [
            "Polymorphism",
            "Polymorphism means \"many forms\", and it occurs when we have many classes that are related to each other by inheritance.",
            "Inheritance lets us inherit attributes and methods from another class. Polymorphism uses those methods to perform different tasks. This allows us to perform a single action in different ways.",
            "Polymorphism can be achieved by method overriding and method overloading.",
            "For example, think of a superclass called Animal that has a method called animalSound().",
            "Subclasses of Animals could be Pigs, Cats, Dogs, Birds - And they also have their own implementation of an animal sound (the pig oinks, and the cat meows, etc.).",
            "Now we can create Pig and Dog objects and call the animalSound() method on both of them: ",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_polymorphism"
        ]
    },
    {
        "level": "java_oop_basics_part2",
        "name": "inner classes",
        "description": [
            "Inner Classes",
            "In Java, it is also possible to nest classes (a class within a class). The purpose of nested classes is to group classes that belong together, which makes your code more readable and maintainable.",
            "To access the inner class, create an object of the outer class, and then create an object of the inner class: ",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_class_inner",
            "Unlike a \"regular\" class, an inner class can be private or protected. If you don't want outside objects to access the inner class, declare the class as private: ",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_class_inner2",
            "An inner class can also be static, which means that you can access it without creating an object of the outer class: ",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_class_inner3",
            "One advantage of inner classes, is that they can access attributes and methods of the outer class: ",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_class_inner_access"
        ]
    },
    {
        "level": "java_oop_basics_part2",
        "name": "abstraction",
        "description": [
            "Abstraction",
            "Data abstraction is the process of hiding certain details and showing only essential information to the user.",
            "Abstraction can be achieved with either abstract classes or Interfaces.",
            "The abstract keyword is a non-access modifier, used for classes and methods:",
            "Abstract class: is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class).",
            "Abstract method: can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from).",
            "An abstract class can have both abstract and regular methods:",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_polymorphism"
        ]
    },
    {
        "level": "java_oop_basics_part2",
        "name": "interface",
        "description": [
            "Interface",
            "An interface is a completely \"abstract class\" that is used to group related methods with empty bodies.",
            "To access the interface methods, the interface must be \"implemented\" (kinda like inherited) by another class with the implements keyword (instead of extends).",
            "The body of the interface method is provided by the \"implement\" class:",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_interface",
            "To implement multiple interfaces, separate them with a comma:",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_interface_multi"
        ]
    },
    {
        "level": "error_handling",
        "name": "exceptions",
        "description": [
            "Exceptions",
            "When executing Java code, different errors can occur: coding errors made by the programmer, errors due to wrong input, or other unforeseeable things.",
            "When an error occurs, Java will normally stop and generate an error message. The technical term for this is: Java will throw an exception (throw an error).",
            "The try statement allows you to define a block of code to be tested for errors while it is being executed.",
            "The catch statement allows you to define a block of code to be executed, if an error occurs in the try block.",
            "The try and catch keywords come in pairs:",
            "1.Arithmetic operators 2.Assignment operators 3.Comparison operators 4.Logical operators 5.Bitwise operators",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_try_catch"
        ]
    },
    {
        "level": "error_handling",
        "name": "catch exceptions",
        "description": [
            "Catch Exceptions",
            "Any exception that might be thrown by a code block in JAVA can be caught by try … catch.",
            "There can be more than one catch block but only one of them will be executed:",
            "http://tpcg.io/PsiSwQwm",
            "When there are multiple catch blocks, it is very important to put certain blocks in front of others.",
            "e.g. UnsupportedEncodingExcetion will never be caught if it is put after IOException because it is inherited from IOException:",
            "http://tpcg.io/Sy4j8ZJR",
            "If there are certain code blocks we wish to execute whether or not an exception is throwed, we can use finally keyword:",
            "http://tpcg.io/RNDi0MYY",
            "Finally keyword is optional and it is always executed at last."
        ]
    },
    {
        "level": "error_handling",
        "name": "throw exceptions",
        "description": [
            "Throw Exceptions",
            "When a function throws an exception and that function does not catch the exception, it will keep being thrown to the last function that invoked it until it is caught:",
            "http://tpcg.io/MDnuTMHb",
            "We can also DIY our own exceptions to throw, normally we use a BaseException and then extends to suitable exceptions based on it:",
            "http://tpcg.io/RNDi0MYY"
        ]
    },
    {
        "level": "collection",
        "name": "ArrayList",
        "description": [
            "ArrayList",
            "The ArrayList class is a resizable array, which can be found in the java.util package.",
            "The difference between a built-in array and an ArrayList in Java, is that the size of an array cannot be modified (if you want to add or remove elements to/from an array, you have to create a new one).",
            "While elements can be added and removed from an ArrayList whenever you want. The syntax is also slightly different:",
            "import java.util.ArrayList; // import the ArrayList class",
            "ArrayList<String> cars = new ArrayList<String>(); // Create an ArrayList object",
            "The ArrayList class has many useful methods. For example, to add elements to the ArrayList, use the add() method:",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_arraylist_add",
            "To access an element in the ArrayList, use the get() method and refer to the index number:",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_arraylist_get",
            "To modify an element, use the set() method and refer to the index number:",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_arraylist_set",
            "To remove an element, use the remove() method and refer to the index number:",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_arraylist_remove",
            "To remove all the elements in the ArrayList, use the clear() method:",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_arraylist_clear",
            "To find out how many elements an ArrayList have, use the size method:",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_arraylist_size",
            "Loop through the elements of an ArrayList with a for loop, and use the size() method to specify how many times the loop should run:",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_arraylist_loop",
            "Alternatively:",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_arraylist_for_each"
        ]
    },
    {
        "level": "collection",
        "name": "LinkedList",
        "description": [
            "LinkedList",
            "The LinkedList class is almost identical to the ArrayList:",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_linkedlist_add",
            "ArrayList vs. LinkedList",
            "The LinkedList class is a collection which can contain many objects of the same type, just like the ArrayList.",
            "The LinkedList class has all of the same methods as the ArrayList class because they both implement the List interface. This means that you can add items, change items, remove items and clear the list in the same way.",
            "However, they are built very differently.",
            "How the ArrayList works:",
            "The ArrayList class has a regular array inside it. When an element is added, it is placed into the array. If the array is not big enough, a new, larger array is created to replace the old one and the old one is removed.",
            "How the LinkedList works:",
            "The LinkedList stores its items in \"containers.\" The list has a link to the first container and each container has a link to the next container in the list.",
            "To add an element to the list, the element is placed into a new container and that container is linked to one of the other containers in the list.",
            "When To Use:",
            "It is best to use an ArrayList when: 1. You want to access random items frequently 2. You only need to add or remove elements at the end of the list",
            "It is best to use a LinkedList when: 1. You only use the list by looping through it instead of accessing random items 2. You frequently need to add and remove items from the beginning, middle or end of the list"
        ]
    },
    {
        "level": "collection",
        "name": "HashMap",
        "description": [
            "HashMap",
            "ArrayList stores items as an ordered collection, and you have to access them with an index number (int type).",
            "A HashMap however, store items in \"key/value\" pairs, and you can access them by an index of another type (e.g. a String).",
            "One object is used as a key (index) to another object (value). It can store different types: String keys and Integer values, or the same type, like: String keys and String values:",
            "import java.util.HashMap; // import the HashMap class",
            "HashMap<String, String> capitalCities = new HashMap<String, String>();",
            "The HashMap class has many useful methods. For example, to add items to it, use the put() method:",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_hashmap_put",
            "To access a value in the HashMap, use the get() method and refer to its key:",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_hashmap_get",
            "To remove an item, use the remove() method and refer to the key:",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_hashmap_remove",
            "To remove all items, use the clear() method:",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_hashmap_clear",
            "To find out how many items there are, use the size() method:",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_hashmap_size",
            "Loop through the items of a HashMap with a for-each loop:",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_hashmap_loop_key"
        ]
    },
    {
        "level": "collection",
        "name": "HashSet",
        "description": [
            "HashSet",
            "A HashSet is a collection of items where every item is unique, and it is found in the java.util package:",
            "import java.util.HashSet; // Import the HashSet class",
            "HashSet<String> cars = new HashSet<String>();",
            "The HashSet class has many useful methods. For example, to add items to it, use the add() method:",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_hashset_add",
            "To check whether an item exists in a HashSet, use the contains() method:",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_hashset_contains",
            "To remove an item, use the remove() method:",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_hashset_remove",
            "To remove all items, use the clear() method:",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_hashset_clear",
            "To find out how many items there are, use the size method:",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_hashset_size",
            "Loop through the items of an HashSet with a for-each loop:",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_hashset_for_each"
        ]
    },
    {
        "level": "collection",
        "name": "Iterator",
        "description": [
            "Iterator",
            "An Iterator is an object that can be used to loop through collections, like ArrayList and HashSet. It is called an \"iterator\" because \"iterating\" is the technical term for looping.",
            "To use an Iterator, you must import it from the java.util package.",
            "The iterator() method can be used to get an Iterator for any collection:",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_iterator",
            "To loop through a collection, use the hasNext() and next() methods of the Iterator:",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_iterator_loop",
            "Iterators are designed to easily change the collections that they loop through. The remove() method can remove items from a collection while looping:",
            "https://www.w3schools.com/java/tryjava.asp?filename=demo_iterator_remove"
        ]
    },
    {
        "level": "io",
        "name": "file handling",
        "description": [
            "File Handling",
            "Java has several methods for creating, reading, updating, and deleting files.",
            "The File class from the java.io package, allows us to work with files.",
            "To use the File class, create an object of the class, and specify the filename or directory name:",
            "import java.io.File;  // Import the File class",
            "File myObj = new File(\"filename.txt\"); // filename.txt is located at the root of the project folder",
            "File myObj = new File(\"files/filename.txt\"); // filename.txt is located in the files folder at the root of the project folder",
            "File myObj = new File(\"/files/filename.txt\"); // filename.txt is located in the files folder at the root of the current system"
        ]
    },
    {
        "level": "io",
        "name": "create files",
        "description": [
            "Create/Write Files",
            "To create a file in Java, you can use the createNewFile() method.",
            ". This method returns a boolean value: true if the file was successfully created, and false if the file already exists.",
            "Note that the method is enclosed in a try...catch block.",
            "This is necessary because it throws an IOException if an error occurs (if the file cannot be created for some reason):",
            "https://www.w3schools.com/java/showjava.asp?filename=demo_files_create",
            "To create a file in a specific directory (requires permission), specify the path of the file and use double backslashes to escape the \"\\\" character (for Windows).",
            "On Mac and Linux you can just write the path, like: /Users/name/filename.txt",
            "https://www.w3schools.com/java/showjava.asp?filename=demo_files_create2",
            "In the following example, we use the FileWriter class together with its write() method to write some text to the file we created in the example above.",
            "Note that when you are done writing to the file, you should close it with the close() method:",
            "https://www.w3schools.com/java/showjava.asp?filename=demo_files_write"
        ]
    },
    {
        "level": "io",
        "name": "read files",
        "description": [
            "Read Files",
            "we use the Scanner class to read the contents of text files:",
            "https://www.w3schools.com/java/showjava.asp?filename=demo_files_read",
            "To get more information about a file, use any of the File methods:",
            "https://www.w3schools.com/java/showjava.asp?filename=demo_files_get"
        ]
    },
    {
        "level": "io",
        "name": "delete files",
        "description": [
            "Delete Files",
            "To delete a file in Java, use the delete() method:",
            "https://www.w3schools.com/java/showjava.asp?filename=demo_files_delete",
            "You can also delete a folder. However, it must be empty:",
            "https://www.w3schools.com/java/showjava.asp?filename=demo_files_delete_folder"
        ]
    }
]